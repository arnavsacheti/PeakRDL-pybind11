/*
 * {{ soc_name }}_bindings.cpp
 * Generated by PeakRDL-pybind11
 * 
 * PyBind11 bindings for SystemRDL register map
 */

#include <pybind11/pybind11.h>
#include <pybind11/functional.h>
#include "{{ soc_name }}_descriptors.hpp"

namespace py = pybind11;
using namespace {{ soc_name }};

PYBIND11_MODULE(_{{ soc_name }}_native, m) {
    m.doc() = "{{ soc_name }} register map generated from SystemRDL";
    
    // Master interface
    py::class_<Master>(m, "Master")
        .def("read", &Master::read, "Read from address")
        .def("write", &Master::write, "Write to address");
    
    // FieldBase
    py::class_<FieldBase>(m, "FieldBase")
        .def_property_readonly("name", &FieldBase::name)
        .def_property_readonly("offset", &FieldBase::offset)
        .def_property_readonly("lsb", &FieldBase::lsb)
        .def_property_readonly("width", &FieldBase::width)
        .def_property_readonly("is_readable", &FieldBase::is_readable)
        .def_property_readonly("is_writable", &FieldBase::is_writable)
        .def_property_readonly("mask", &FieldBase::mask);
    
    // RegisterBase
    py::class_<RegisterBase>(m, "RegisterBase")
        .def_property_readonly("name", &RegisterBase::name)
        .def_property_readonly("offset", &RegisterBase::offset)
        .def_property_readonly("width", &RegisterBase::width)
        .def("read", &RegisterBase::read, "Read register value")
        .def("write", &RegisterBase::write, "Write register value")
        .def("modify", &RegisterBase::modify, "Read-modify-write operation");
    
    // NodeBase
    py::class_<NodeBase>(m, "NodeBase")
        .def_property_readonly("name", &NodeBase::name)
        .def_property_readonly("offset", &NodeBase::offset);
    
    {% for reg in nodes.regs %}
    // Register class: {{ reg.inst_name }}
    py::class_<{{ reg.inst_name }}_t, RegisterBase>(m, "{{ reg.inst_name }}_t")
        .def(py::init<uint64_t>())
        {% for field in reg.fields() %}
        .def_readonly("{{ field.inst_name }}", &{{ reg.inst_name }}_t::{{ field.inst_name }})
        {% endfor %}
        ;
    
    {% for field in reg.fields() %}
    // Field class: {{ reg.inst_name }}.{{ field.inst_name }}
    py::class_<{{ reg.inst_name }}_t::{{ field.inst_name }}_field, FieldBase>(m, "{{ reg.inst_name }}_{{ field.inst_name }}_field")
        .def("read", &{{ reg.inst_name }}_t::{{ field.inst_name }}_field::read, "Read field value")
        .def("write", &{{ reg.inst_name }}_t::{{ field.inst_name }}_field::write, "Write field value");
    {% endfor %}
    {% endfor %}
    
    // Top-level SoC class
    py::class_<{{ soc_name }}_t, NodeBase>(m, "{{ soc_name }}_t")
        .def(py::init<>())
        .def("attach_master", &{{ soc_name }}_t::attach_master, "Attach a master interface")
        {% for child in top_node.children() %}
        {% if child.inst_name %}
        .def_readonly("{{ child.inst_name }}", &{{ soc_name }}_t::{{ child.inst_name }})
        {% endif %}
        {% endfor %}
        ;
}
