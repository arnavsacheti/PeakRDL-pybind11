"""
Type stubs for example_soc
Generated by PeakRDL-pybind11
"""

from typing import Protocol

class Master(Protocol):
    """Master interface for register access"""
    
    def read(self, address: int, width: int) -> int:
        """Read a value from the given address"""
        ...
    
    def write(self, address: int, value: int, width: int) -> None:
        """Write a value to the given address"""
        ...

class FieldBase:
    """Base class for register fields"""
    
    @property
    def name(self) -> str: ...
    
    @property
    def offset(self) -> int: ...
    
    @property
    def lsb(self) -> int: ...
    
    @property
    def msb(self) -> int: ...
    
    @property
    def width(self) -> int: ...
    
    @property
    def is_readable(self) -> bool: ...
    
    @property
    def is_writable(self) -> bool: ...
    
    @property
    def mask(self) -> int: ...

class RegisterBase:
    """Base class for registers"""
    
    @property
    def name(self) -> str: ...
    
    @property
    def offset(self) -> int: ...
    
    @property
    def width(self) -> int: ...
    
    def read(self) -> int:
        """Read the full register value"""
        ...
    
    def write(self, value: int) -> None:
        """Write the full register value"""
        ...
    
    def modify(self, value: int, mask: int) -> None:
        """Read-modify-write operation with mask"""
        ...

class NodeBase:
    """Base class for address maps and register files"""
    
    @property
    def name(self) -> str: ...
    
    @property
    def offset(self) -> int: ...

class control_t(RegisterBase):
    """Register: control
    UART control and configuration
"""
    
    def __init__(self, base_offset: int) -> None: ...
    
    class enable_field(FieldBase):
        """Field: enable
        Enable UART
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    enable: enable_field
    class baudrate_field(FieldBase):
        """Field: baudrate
        Baudrate selection (0=9600, 1=19200, 2=115200)
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    baudrate: baudrate_field
    class parity_field(FieldBase):
        """Field: parity
        Parity mode (0=none, 1=odd, 2=even)
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    parity: parity_field

class status_t(RegisterBase):
    """Register: status
    UART status flags
"""
    
    def __init__(self, base_offset: int) -> None: ...
    
    class tx_ready_field(FieldBase):
        """Field: tx_ready
        Transmit buffer ready
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    tx_ready: tx_ready_field
    class rx_ready_field(FieldBase):
        """Field: rx_ready
        Receive buffer has data
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    rx_ready: rx_ready_field
    class error_field(FieldBase):
        """Field: error
        Error flag
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    error: error_field

class data_t(RegisterBase):
    """Register: data
    UART data buffer
"""
    
    def __init__(self, base_offset: int) -> None: ...
    
    class data_field(FieldBase):
        """Field: data
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    data: data_field

class direction_t(RegisterBase):
    """Register: direction
    GPIO pin direction (0=input, 1=output)
"""
    
    def __init__(self, base_offset: int) -> None: ...
    
    class direction_field(FieldBase):
        """Field: direction
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    direction: direction_field

class output_t(RegisterBase):
    """Register: output
    GPIO output values
"""
    
    def __init__(self, base_offset: int) -> None: ...
    
    class output_field(FieldBase):
        """Field: output
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    output: output_field

class input_t(RegisterBase):
    """Register: input
    GPIO input values
"""
    
    def __init__(self, base_offset: int) -> None: ...
    
    class input_field(FieldBase):
        """Field: input
"""
        
        def read(self) -> int:
            """Read field value"""
            ...
        
        def write(self, value: int) -> None:
            """Write field value"""
            ...
    
    input: input_field


class example_soc_t(NodeBase):
    """Top-level SoC register map"""
    
    def __init__(self) -> None: ...
    
    def attach_master(self, master: Master) -> None:
        """Attach a master interface for register access"""
        ...
    
    uart: uart_t
    gpio: gpio_t

def create() -> example_soc_t:
    """Create a new instance of the example_soc register map"""
    ...