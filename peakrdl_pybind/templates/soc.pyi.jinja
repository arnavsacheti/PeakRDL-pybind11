from typing import Any, Dict

class Master:
    def read32(self, addr: int) -> int: ...
    def write32(self, addr: int, data: int, wstrb: int = ...) -> None: ...
    def read_block(self, addr: int, dst: bytearray, length: int) -> None: ...
    def write_block(self, addr: int, src: bytes, length: int) -> None: ...

class Field:
    def get(self) -> int: ...
    def set(self, value: int) -> None: ...
    @property
    def lsb(self) -> int: ...
    @property
    def msb(self) -> int: ...
    @property
    def mask(self) -> int: ...

class Register:
    def read(self) -> int: ...
    def write(self, value: int) -> None: ...
    def modify(self, **fields: int) -> None: ...
    @property
    def address(self) -> int: ...
    @property
    def width(self) -> int: ...

class Block:
    @property
    def name(self) -> str: ...
    @property
    def address(self) -> int: ...

class _Top(Block):
    ...

top: _Top

def attach_master(master: Master) -> None: ...
def master_attached() -> bool: ...
