from typing import Protocol, runtime_checkable, Any

class Master:
    def read32(self, addr: int) -> int: ...
    def write32(self, addr: int, data: int, wstrb: int = 0xF) -> None: ...
    def read_block(self, addr: int, dst: bytearray, length: int) -> None: ...
    def write_block(self, addr: int, src: bytes, length: int) -> None: ...
    @property
    def little_endian(self) -> bool: ...
    @property
    def word_bytes(self) -> int: ...

class Field:
    def get(self) -> int: ...
    def set(self, value: int) -> None: ...
    @property
    def lsb(self) -> int: ...
    @property
    def msb(self) -> int: ...
    @property
    def mask(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def path(self) -> str: ...

class Register:
    def read(self) -> int: ...
    def write(self, value: int) -> None: ...
    def set_bits(self, mask: int) -> None: ...
    def clear_bits(self, mask: int) -> None: ...
    def modify(self, **kwargs: int) -> None: ...
    @property
    def address(self) -> int: ...
    @property
    def width(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def path(self) -> str: ...

class Block:
    def __getattr__(self, name: str) -> Any: ...
    @property
    def path(self) -> str: ...
    @property
    def base_address(self) -> int: ...

class Array:
    def __getitem__(self, index: int) -> Block: ...
    @property
    def size(self) -> int: ...

class AccessError(RuntimeError):
    ...

def attach_master(master: Master) -> None: ...
def master_attached() -> bool: ...
def reset_to_defaults() -> None: ...

top: Block
